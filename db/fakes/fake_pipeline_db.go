// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
)

type FakePipelineDB struct {
	GetPipelineNameStub        func() string
	getPipelineNameMutex       sync.RWMutex
	getPipelineNameArgsForCall []struct{}
	getPipelineNameReturns struct {
		result1 string
	}
	ScopedNameStub        func(string) string
	scopedNameMutex       sync.RWMutex
	scopedNameArgsForCall []struct {
		arg1 string
	}
	scopedNameReturns struct {
		result1 string
	}
	PauseStub        func() error
	pauseMutex       sync.RWMutex
	pauseArgsForCall []struct{}
	pauseReturns struct {
		result1 error
	}
	UnpauseStub        func() error
	unpauseMutex       sync.RWMutex
	unpauseArgsForCall []struct{}
	unpauseReturns struct {
		result1 error
	}
	IsPausedStub        func() (bool, error)
	isPausedMutex       sync.RWMutex
	isPausedArgsForCall []struct{}
	isPausedReturns struct {
		result1 bool
		result2 error
	}
	DestroyStub        func() error
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct{}
	destroyReturns struct {
		result1 error
	}
	GetConfigStub        func() (atc.Config, db.ConfigVersion, error)
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct{}
	getConfigReturns struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}
	GetResourceStub        func(resourceName string) (db.SavedResource, error)
	getResourceMutex       sync.RWMutex
	getResourceArgsForCall []struct {
		resourceName string
	}
	getResourceReturns struct {
		result1 db.SavedResource
		result2 error
	}
	GetResourceHistoryStub        func(resource string) ([]*db.VersionHistory, error)
	getResourceHistoryMutex       sync.RWMutex
	getResourceHistoryArgsForCall []struct {
		resource string
	}
	getResourceHistoryReturns struct {
		result1 []*db.VersionHistory
		result2 error
	}
	GetResourceHistoryCursorStub        func(resource string, startingID int, searchUpwards bool, numResults int) ([]*db.VersionHistory, bool, error)
	getResourceHistoryCursorMutex       sync.RWMutex
	getResourceHistoryCursorArgsForCall []struct {
		resource      string
		startingID    int
		searchUpwards bool
		numResults    int
	}
	getResourceHistoryCursorReturns struct {
		result1 []*db.VersionHistory
		result2 bool
		result3 error
	}
	GetResourceHistoryMaxIDStub        func(resource string) (int, error)
	getResourceHistoryMaxIDMutex       sync.RWMutex
	getResourceHistoryMaxIDArgsForCall []struct {
		resource string
	}
	getResourceHistoryMaxIDReturns struct {
		result1 int
		result2 error
	}
	PauseResourceStub        func(resourceName string) error
	pauseResourceMutex       sync.RWMutex
	pauseResourceArgsForCall []struct {
		resourceName string
	}
	pauseResourceReturns struct {
		result1 error
	}
	UnpauseResourceStub        func(resourceName string) error
	unpauseResourceMutex       sync.RWMutex
	unpauseResourceArgsForCall []struct {
		resourceName string
	}
	unpauseResourceReturns struct {
		result1 error
	}
	SaveResourceVersionsStub        func(atc.ResourceConfig, []atc.Version) error
	saveResourceVersionsMutex       sync.RWMutex
	saveResourceVersionsArgsForCall []struct {
		arg1 atc.ResourceConfig
		arg2 []atc.Version
	}
	saveResourceVersionsReturns struct {
		result1 error
	}
	GetLatestVersionedResourceStub        func(resource db.SavedResource) (db.SavedVersionedResource, error)
	getLatestVersionedResourceMutex       sync.RWMutex
	getLatestVersionedResourceArgsForCall []struct {
		resource db.SavedResource
	}
	getLatestVersionedResourceReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	EnableVersionedResourceStub        func(resourceID int) error
	enableVersionedResourceMutex       sync.RWMutex
	enableVersionedResourceArgsForCall []struct {
		resourceID int
	}
	enableVersionedResourceReturns struct {
		result1 error
	}
	DisableVersionedResourceStub        func(resourceID int) error
	disableVersionedResourceMutex       sync.RWMutex
	disableVersionedResourceArgsForCall []struct {
		resourceID int
	}
	disableVersionedResourceReturns struct {
		result1 error
	}
	SetResourceCheckErrorStub        func(resource db.SavedResource, err error) error
	setResourceCheckErrorMutex       sync.RWMutex
	setResourceCheckErrorArgsForCall []struct {
		resource db.SavedResource
		err      error
	}
	setResourceCheckErrorReturns struct {
		result1 error
	}
	GetJobStub        func(job string) (db.SavedJob, error)
	getJobMutex       sync.RWMutex
	getJobArgsForCall []struct {
		job string
	}
	getJobReturns struct {
		result1 db.SavedJob
		result2 error
	}
	PauseJobStub        func(job string) error
	pauseJobMutex       sync.RWMutex
	pauseJobArgsForCall []struct {
		job string
	}
	pauseJobReturns struct {
		result1 error
	}
	UnpauseJobStub        func(job string) error
	unpauseJobMutex       sync.RWMutex
	unpauseJobArgsForCall []struct {
		job string
	}
	unpauseJobReturns struct {
		result1 error
	}
	GetJobFinishedAndNextBuildStub        func(job string) (*db.Build, *db.Build, error)
	getJobFinishedAndNextBuildMutex       sync.RWMutex
	getJobFinishedAndNextBuildArgsForCall []struct {
		job string
	}
	getJobFinishedAndNextBuildReturns struct {
		result1 *db.Build
		result2 *db.Build
		result3 error
	}
	GetAllJobBuildsStub        func(job string) ([]db.Build, error)
	getAllJobBuildsMutex       sync.RWMutex
	getAllJobBuildsArgsForCall []struct {
		job string
	}
	getAllJobBuildsReturns struct {
		result1 []db.Build
		result2 error
	}
	GetJobBuildStub        func(job string, build string) (db.Build, error)
	getJobBuildMutex       sync.RWMutex
	getJobBuildArgsForCall []struct {
		job   string
		build string
	}
	getJobBuildReturns struct {
		result1 db.Build
		result2 error
	}
	CreateJobBuildStub        func(job string) (db.Build, error)
	createJobBuildMutex       sync.RWMutex
	createJobBuildArgsForCall []struct {
		job string
	}
	createJobBuildReturns struct {
		result1 db.Build
		result2 error
	}
	CreateJobBuildForCandidateInputsStub        func(job string) (db.Build, bool, error)
	createJobBuildForCandidateInputsMutex       sync.RWMutex
	createJobBuildForCandidateInputsArgsForCall []struct {
		job string
	}
	createJobBuildForCandidateInputsReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	UseInputsForBuildStub        func(buildID int, inputs []db.BuildInput) error
	useInputsForBuildMutex       sync.RWMutex
	useInputsForBuildArgsForCall []struct {
		buildID int
		inputs  []db.BuildInput
	}
	useInputsForBuildReturns struct {
		result1 error
	}
	GetLatestInputVersionsStub        func([]atc.JobInput) ([]db.BuildInput, error)
	getLatestInputVersionsMutex       sync.RWMutex
	getLatestInputVersionsArgsForCall []struct {
		arg1 []atc.JobInput
	}
	getLatestInputVersionsReturns struct {
		result1 []db.BuildInput
		result2 error
	}
	GetJobBuildForInputsStub        func(job string, inputs []db.BuildInput) (db.Build, error)
	getJobBuildForInputsMutex       sync.RWMutex
	getJobBuildForInputsArgsForCall []struct {
		job    string
		inputs []db.BuildInput
	}
	getJobBuildForInputsReturns struct {
		result1 db.Build
		result2 error
	}
	GetNextPendingBuildStub        func(job string) (db.Build, error)
	getNextPendingBuildMutex       sync.RWMutex
	getNextPendingBuildArgsForCall []struct {
		job string
	}
	getNextPendingBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetCurrentBuildStub        func(job string) (db.Build, error)
	getCurrentBuildMutex       sync.RWMutex
	getCurrentBuildArgsForCall []struct {
		job string
	}
	getCurrentBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetRunningBuildsBySerialGroupStub        func(jobName string, serialGrous []string) ([]db.Build, error)
	getRunningBuildsBySerialGroupMutex       sync.RWMutex
	getRunningBuildsBySerialGroupArgsForCall []struct {
		jobName     string
		serialGrous []string
	}
	getRunningBuildsBySerialGroupReturns struct {
		result1 []db.Build
		result2 error
	}
	GetNextPendingBuildBySerialGroupStub        func(jobName string, serialGroups []string) (db.Build, error)
	getNextPendingBuildBySerialGroupMutex       sync.RWMutex
	getNextPendingBuildBySerialGroupArgsForCall []struct {
		jobName      string
		serialGroups []string
	}
	getNextPendingBuildBySerialGroupReturns struct {
		result1 db.Build
		result2 error
	}
	ScheduleBuildStub        func(buildID int, job atc.JobConfig) (bool, error)
	scheduleBuildMutex       sync.RWMutex
	scheduleBuildArgsForCall []struct {
		buildID int
		job     atc.JobConfig
	}
	scheduleBuildReturns struct {
		result1 bool
		result2 error
	}
	SaveBuildInputStub        func(buildID int, input db.BuildInput) (db.SavedVersionedResource, error)
	saveBuildInputMutex       sync.RWMutex
	saveBuildInputArgsForCall []struct {
		buildID int
		input   db.BuildInput
	}
	saveBuildInputReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	SaveBuildOutputStub        func(buildID int, vr db.VersionedResource) (db.SavedVersionedResource, error)
	saveBuildOutputMutex       sync.RWMutex
	saveBuildOutputArgsForCall []struct {
		buildID int
		vr      db.VersionedResource
	}
	saveBuildOutputReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	GetBuildResourcesStub        func(buildID int) ([]db.BuildInput, []db.BuildOutput, error)
	getBuildResourcesMutex       sync.RWMutex
	getBuildResourcesArgsForCall []struct {
		buildID int
	}
	getBuildResourcesReturns struct {
		result1 []db.BuildInput
		result2 []db.BuildOutput
		result3 error
	}
}

func (fake *FakePipelineDB) GetPipelineName() string {
	fake.getPipelineNameMutex.Lock()
	fake.getPipelineNameArgsForCall = append(fake.getPipelineNameArgsForCall, struct{}{})
	fake.getPipelineNameMutex.Unlock()
	if fake.GetPipelineNameStub != nil {
		return fake.GetPipelineNameStub()
	} else {
		return fake.getPipelineNameReturns.result1
	}
}

func (fake *FakePipelineDB) GetPipelineNameCallCount() int {
	fake.getPipelineNameMutex.RLock()
	defer fake.getPipelineNameMutex.RUnlock()
	return len(fake.getPipelineNameArgsForCall)
}

func (fake *FakePipelineDB) GetPipelineNameReturns(result1 string) {
	fake.GetPipelineNameStub = nil
	fake.getPipelineNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePipelineDB) ScopedName(arg1 string) string {
	fake.scopedNameMutex.Lock()
	fake.scopedNameArgsForCall = append(fake.scopedNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.scopedNameMutex.Unlock()
	if fake.ScopedNameStub != nil {
		return fake.ScopedNameStub(arg1)
	} else {
		return fake.scopedNameReturns.result1
	}
}

func (fake *FakePipelineDB) ScopedNameCallCount() int {
	fake.scopedNameMutex.RLock()
	defer fake.scopedNameMutex.RUnlock()
	return len(fake.scopedNameArgsForCall)
}

func (fake *FakePipelineDB) ScopedNameArgsForCall(i int) string {
	fake.scopedNameMutex.RLock()
	defer fake.scopedNameMutex.RUnlock()
	return fake.scopedNameArgsForCall[i].arg1
}

func (fake *FakePipelineDB) ScopedNameReturns(result1 string) {
	fake.ScopedNameStub = nil
	fake.scopedNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePipelineDB) Pause() error {
	fake.pauseMutex.Lock()
	fake.pauseArgsForCall = append(fake.pauseArgsForCall, struct{}{})
	fake.pauseMutex.Unlock()
	if fake.PauseStub != nil {
		return fake.PauseStub()
	} else {
		return fake.pauseReturns.result1
	}
}

func (fake *FakePipelineDB) PauseCallCount() int {
	fake.pauseMutex.RLock()
	defer fake.pauseMutex.RUnlock()
	return len(fake.pauseArgsForCall)
}

func (fake *FakePipelineDB) PauseReturns(result1 error) {
	fake.PauseStub = nil
	fake.pauseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) Unpause() error {
	fake.unpauseMutex.Lock()
	fake.unpauseArgsForCall = append(fake.unpauseArgsForCall, struct{}{})
	fake.unpauseMutex.Unlock()
	if fake.UnpauseStub != nil {
		return fake.UnpauseStub()
	} else {
		return fake.unpauseReturns.result1
	}
}

func (fake *FakePipelineDB) UnpauseCallCount() int {
	fake.unpauseMutex.RLock()
	defer fake.unpauseMutex.RUnlock()
	return len(fake.unpauseArgsForCall)
}

func (fake *FakePipelineDB) UnpauseReturns(result1 error) {
	fake.UnpauseStub = nil
	fake.unpauseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) IsPaused() (bool, error) {
	fake.isPausedMutex.Lock()
	fake.isPausedArgsForCall = append(fake.isPausedArgsForCall, struct{}{})
	fake.isPausedMutex.Unlock()
	if fake.IsPausedStub != nil {
		return fake.IsPausedStub()
	} else {
		return fake.isPausedReturns.result1, fake.isPausedReturns.result2
	}
}

func (fake *FakePipelineDB) IsPausedCallCount() int {
	fake.isPausedMutex.RLock()
	defer fake.isPausedMutex.RUnlock()
	return len(fake.isPausedArgsForCall)
}

func (fake *FakePipelineDB) IsPausedReturns(result1 bool, result2 error) {
	fake.IsPausedStub = nil
	fake.isPausedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) Destroy() error {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct{}{})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		return fake.DestroyStub()
	} else {
		return fake.destroyReturns.result1
	}
}

func (fake *FakePipelineDB) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakePipelineDB) DestroyReturns(result1 error) {
	fake.DestroyStub = nil
	fake.destroyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) GetConfig() (atc.Config, db.ConfigVersion, error) {
	fake.getConfigMutex.Lock()
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct{}{})
	fake.getConfigMutex.Unlock()
	if fake.GetConfigStub != nil {
		return fake.GetConfigStub()
	} else {
		return fake.getConfigReturns.result1, fake.getConfigReturns.result2, fake.getConfigReturns.result3
	}
}

func (fake *FakePipelineDB) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakePipelineDB) GetConfigReturns(result1 atc.Config, result2 db.ConfigVersion, result3 error) {
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePipelineDB) GetResource(resourceName string) (db.SavedResource, error) {
	fake.getResourceMutex.Lock()
	fake.getResourceArgsForCall = append(fake.getResourceArgsForCall, struct {
		resourceName string
	}{resourceName})
	fake.getResourceMutex.Unlock()
	if fake.GetResourceStub != nil {
		return fake.GetResourceStub(resourceName)
	} else {
		return fake.getResourceReturns.result1, fake.getResourceReturns.result2
	}
}

func (fake *FakePipelineDB) GetResourceCallCount() int {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	return len(fake.getResourceArgsForCall)
}

func (fake *FakePipelineDB) GetResourceArgsForCall(i int) string {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	return fake.getResourceArgsForCall[i].resourceName
}

func (fake *FakePipelineDB) GetResourceReturns(result1 db.SavedResource, result2 error) {
	fake.GetResourceStub = nil
	fake.getResourceReturns = struct {
		result1 db.SavedResource
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetResourceHistory(resource string) ([]*db.VersionHistory, error) {
	fake.getResourceHistoryMutex.Lock()
	fake.getResourceHistoryArgsForCall = append(fake.getResourceHistoryArgsForCall, struct {
		resource string
	}{resource})
	fake.getResourceHistoryMutex.Unlock()
	if fake.GetResourceHistoryStub != nil {
		return fake.GetResourceHistoryStub(resource)
	} else {
		return fake.getResourceHistoryReturns.result1, fake.getResourceHistoryReturns.result2
	}
}

func (fake *FakePipelineDB) GetResourceHistoryCallCount() int {
	fake.getResourceHistoryMutex.RLock()
	defer fake.getResourceHistoryMutex.RUnlock()
	return len(fake.getResourceHistoryArgsForCall)
}

func (fake *FakePipelineDB) GetResourceHistoryArgsForCall(i int) string {
	fake.getResourceHistoryMutex.RLock()
	defer fake.getResourceHistoryMutex.RUnlock()
	return fake.getResourceHistoryArgsForCall[i].resource
}

func (fake *FakePipelineDB) GetResourceHistoryReturns(result1 []*db.VersionHistory, result2 error) {
	fake.GetResourceHistoryStub = nil
	fake.getResourceHistoryReturns = struct {
		result1 []*db.VersionHistory
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetResourceHistoryCursor(resource string, startingID int, searchUpwards bool, numResults int) ([]*db.VersionHistory, bool, error) {
	fake.getResourceHistoryCursorMutex.Lock()
	fake.getResourceHistoryCursorArgsForCall = append(fake.getResourceHistoryCursorArgsForCall, struct {
		resource      string
		startingID    int
		searchUpwards bool
		numResults    int
	}{resource, startingID, searchUpwards, numResults})
	fake.getResourceHistoryCursorMutex.Unlock()
	if fake.GetResourceHistoryCursorStub != nil {
		return fake.GetResourceHistoryCursorStub(resource, startingID, searchUpwards, numResults)
	} else {
		return fake.getResourceHistoryCursorReturns.result1, fake.getResourceHistoryCursorReturns.result2, fake.getResourceHistoryCursorReturns.result3
	}
}

func (fake *FakePipelineDB) GetResourceHistoryCursorCallCount() int {
	fake.getResourceHistoryCursorMutex.RLock()
	defer fake.getResourceHistoryCursorMutex.RUnlock()
	return len(fake.getResourceHistoryCursorArgsForCall)
}

func (fake *FakePipelineDB) GetResourceHistoryCursorArgsForCall(i int) (string, int, bool, int) {
	fake.getResourceHistoryCursorMutex.RLock()
	defer fake.getResourceHistoryCursorMutex.RUnlock()
	return fake.getResourceHistoryCursorArgsForCall[i].resource, fake.getResourceHistoryCursorArgsForCall[i].startingID, fake.getResourceHistoryCursorArgsForCall[i].searchUpwards, fake.getResourceHistoryCursorArgsForCall[i].numResults
}

func (fake *FakePipelineDB) GetResourceHistoryCursorReturns(result1 []*db.VersionHistory, result2 bool, result3 error) {
	fake.GetResourceHistoryCursorStub = nil
	fake.getResourceHistoryCursorReturns = struct {
		result1 []*db.VersionHistory
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePipelineDB) GetResourceHistoryMaxID(resource string) (int, error) {
	fake.getResourceHistoryMaxIDMutex.Lock()
	fake.getResourceHistoryMaxIDArgsForCall = append(fake.getResourceHistoryMaxIDArgsForCall, struct {
		resource string
	}{resource})
	fake.getResourceHistoryMaxIDMutex.Unlock()
	if fake.GetResourceHistoryMaxIDStub != nil {
		return fake.GetResourceHistoryMaxIDStub(resource)
	} else {
		return fake.getResourceHistoryMaxIDReturns.result1, fake.getResourceHistoryMaxIDReturns.result2
	}
}

func (fake *FakePipelineDB) GetResourceHistoryMaxIDCallCount() int {
	fake.getResourceHistoryMaxIDMutex.RLock()
	defer fake.getResourceHistoryMaxIDMutex.RUnlock()
	return len(fake.getResourceHistoryMaxIDArgsForCall)
}

func (fake *FakePipelineDB) GetResourceHistoryMaxIDArgsForCall(i int) string {
	fake.getResourceHistoryMaxIDMutex.RLock()
	defer fake.getResourceHistoryMaxIDMutex.RUnlock()
	return fake.getResourceHistoryMaxIDArgsForCall[i].resource
}

func (fake *FakePipelineDB) GetResourceHistoryMaxIDReturns(result1 int, result2 error) {
	fake.GetResourceHistoryMaxIDStub = nil
	fake.getResourceHistoryMaxIDReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) PauseResource(resourceName string) error {
	fake.pauseResourceMutex.Lock()
	fake.pauseResourceArgsForCall = append(fake.pauseResourceArgsForCall, struct {
		resourceName string
	}{resourceName})
	fake.pauseResourceMutex.Unlock()
	if fake.PauseResourceStub != nil {
		return fake.PauseResourceStub(resourceName)
	} else {
		return fake.pauseResourceReturns.result1
	}
}

func (fake *FakePipelineDB) PauseResourceCallCount() int {
	fake.pauseResourceMutex.RLock()
	defer fake.pauseResourceMutex.RUnlock()
	return len(fake.pauseResourceArgsForCall)
}

func (fake *FakePipelineDB) PauseResourceArgsForCall(i int) string {
	fake.pauseResourceMutex.RLock()
	defer fake.pauseResourceMutex.RUnlock()
	return fake.pauseResourceArgsForCall[i].resourceName
}

func (fake *FakePipelineDB) PauseResourceReturns(result1 error) {
	fake.PauseResourceStub = nil
	fake.pauseResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) UnpauseResource(resourceName string) error {
	fake.unpauseResourceMutex.Lock()
	fake.unpauseResourceArgsForCall = append(fake.unpauseResourceArgsForCall, struct {
		resourceName string
	}{resourceName})
	fake.unpauseResourceMutex.Unlock()
	if fake.UnpauseResourceStub != nil {
		return fake.UnpauseResourceStub(resourceName)
	} else {
		return fake.unpauseResourceReturns.result1
	}
}

func (fake *FakePipelineDB) UnpauseResourceCallCount() int {
	fake.unpauseResourceMutex.RLock()
	defer fake.unpauseResourceMutex.RUnlock()
	return len(fake.unpauseResourceArgsForCall)
}

func (fake *FakePipelineDB) UnpauseResourceArgsForCall(i int) string {
	fake.unpauseResourceMutex.RLock()
	defer fake.unpauseResourceMutex.RUnlock()
	return fake.unpauseResourceArgsForCall[i].resourceName
}

func (fake *FakePipelineDB) UnpauseResourceReturns(result1 error) {
	fake.UnpauseResourceStub = nil
	fake.unpauseResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) SaveResourceVersions(arg1 atc.ResourceConfig, arg2 []atc.Version) error {
	fake.saveResourceVersionsMutex.Lock()
	fake.saveResourceVersionsArgsForCall = append(fake.saveResourceVersionsArgsForCall, struct {
		arg1 atc.ResourceConfig
		arg2 []atc.Version
	}{arg1, arg2})
	fake.saveResourceVersionsMutex.Unlock()
	if fake.SaveResourceVersionsStub != nil {
		return fake.SaveResourceVersionsStub(arg1, arg2)
	} else {
		return fake.saveResourceVersionsReturns.result1
	}
}

func (fake *FakePipelineDB) SaveResourceVersionsCallCount() int {
	fake.saveResourceVersionsMutex.RLock()
	defer fake.saveResourceVersionsMutex.RUnlock()
	return len(fake.saveResourceVersionsArgsForCall)
}

func (fake *FakePipelineDB) SaveResourceVersionsArgsForCall(i int) (atc.ResourceConfig, []atc.Version) {
	fake.saveResourceVersionsMutex.RLock()
	defer fake.saveResourceVersionsMutex.RUnlock()
	return fake.saveResourceVersionsArgsForCall[i].arg1, fake.saveResourceVersionsArgsForCall[i].arg2
}

func (fake *FakePipelineDB) SaveResourceVersionsReturns(result1 error) {
	fake.SaveResourceVersionsStub = nil
	fake.saveResourceVersionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) GetLatestVersionedResource(resource db.SavedResource) (db.SavedVersionedResource, error) {
	fake.getLatestVersionedResourceMutex.Lock()
	fake.getLatestVersionedResourceArgsForCall = append(fake.getLatestVersionedResourceArgsForCall, struct {
		resource db.SavedResource
	}{resource})
	fake.getLatestVersionedResourceMutex.Unlock()
	if fake.GetLatestVersionedResourceStub != nil {
		return fake.GetLatestVersionedResourceStub(resource)
	} else {
		return fake.getLatestVersionedResourceReturns.result1, fake.getLatestVersionedResourceReturns.result2
	}
}

func (fake *FakePipelineDB) GetLatestVersionedResourceCallCount() int {
	fake.getLatestVersionedResourceMutex.RLock()
	defer fake.getLatestVersionedResourceMutex.RUnlock()
	return len(fake.getLatestVersionedResourceArgsForCall)
}

func (fake *FakePipelineDB) GetLatestVersionedResourceArgsForCall(i int) db.SavedResource {
	fake.getLatestVersionedResourceMutex.RLock()
	defer fake.getLatestVersionedResourceMutex.RUnlock()
	return fake.getLatestVersionedResourceArgsForCall[i].resource
}

func (fake *FakePipelineDB) GetLatestVersionedResourceReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.GetLatestVersionedResourceStub = nil
	fake.getLatestVersionedResourceReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) EnableVersionedResource(resourceID int) error {
	fake.enableVersionedResourceMutex.Lock()
	fake.enableVersionedResourceArgsForCall = append(fake.enableVersionedResourceArgsForCall, struct {
		resourceID int
	}{resourceID})
	fake.enableVersionedResourceMutex.Unlock()
	if fake.EnableVersionedResourceStub != nil {
		return fake.EnableVersionedResourceStub(resourceID)
	} else {
		return fake.enableVersionedResourceReturns.result1
	}
}

func (fake *FakePipelineDB) EnableVersionedResourceCallCount() int {
	fake.enableVersionedResourceMutex.RLock()
	defer fake.enableVersionedResourceMutex.RUnlock()
	return len(fake.enableVersionedResourceArgsForCall)
}

func (fake *FakePipelineDB) EnableVersionedResourceArgsForCall(i int) int {
	fake.enableVersionedResourceMutex.RLock()
	defer fake.enableVersionedResourceMutex.RUnlock()
	return fake.enableVersionedResourceArgsForCall[i].resourceID
}

func (fake *FakePipelineDB) EnableVersionedResourceReturns(result1 error) {
	fake.EnableVersionedResourceStub = nil
	fake.enableVersionedResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) DisableVersionedResource(resourceID int) error {
	fake.disableVersionedResourceMutex.Lock()
	fake.disableVersionedResourceArgsForCall = append(fake.disableVersionedResourceArgsForCall, struct {
		resourceID int
	}{resourceID})
	fake.disableVersionedResourceMutex.Unlock()
	if fake.DisableVersionedResourceStub != nil {
		return fake.DisableVersionedResourceStub(resourceID)
	} else {
		return fake.disableVersionedResourceReturns.result1
	}
}

func (fake *FakePipelineDB) DisableVersionedResourceCallCount() int {
	fake.disableVersionedResourceMutex.RLock()
	defer fake.disableVersionedResourceMutex.RUnlock()
	return len(fake.disableVersionedResourceArgsForCall)
}

func (fake *FakePipelineDB) DisableVersionedResourceArgsForCall(i int) int {
	fake.disableVersionedResourceMutex.RLock()
	defer fake.disableVersionedResourceMutex.RUnlock()
	return fake.disableVersionedResourceArgsForCall[i].resourceID
}

func (fake *FakePipelineDB) DisableVersionedResourceReturns(result1 error) {
	fake.DisableVersionedResourceStub = nil
	fake.disableVersionedResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) SetResourceCheckError(resource db.SavedResource, err error) error {
	fake.setResourceCheckErrorMutex.Lock()
	fake.setResourceCheckErrorArgsForCall = append(fake.setResourceCheckErrorArgsForCall, struct {
		resource db.SavedResource
		err      error
	}{resource, err})
	fake.setResourceCheckErrorMutex.Unlock()
	if fake.SetResourceCheckErrorStub != nil {
		return fake.SetResourceCheckErrorStub(resource, err)
	} else {
		return fake.setResourceCheckErrorReturns.result1
	}
}

func (fake *FakePipelineDB) SetResourceCheckErrorCallCount() int {
	fake.setResourceCheckErrorMutex.RLock()
	defer fake.setResourceCheckErrorMutex.RUnlock()
	return len(fake.setResourceCheckErrorArgsForCall)
}

func (fake *FakePipelineDB) SetResourceCheckErrorArgsForCall(i int) (db.SavedResource, error) {
	fake.setResourceCheckErrorMutex.RLock()
	defer fake.setResourceCheckErrorMutex.RUnlock()
	return fake.setResourceCheckErrorArgsForCall[i].resource, fake.setResourceCheckErrorArgsForCall[i].err
}

func (fake *FakePipelineDB) SetResourceCheckErrorReturns(result1 error) {
	fake.SetResourceCheckErrorStub = nil
	fake.setResourceCheckErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) GetJob(job string) (db.SavedJob, error) {
	fake.getJobMutex.Lock()
	fake.getJobArgsForCall = append(fake.getJobArgsForCall, struct {
		job string
	}{job})
	fake.getJobMutex.Unlock()
	if fake.GetJobStub != nil {
		return fake.GetJobStub(job)
	} else {
		return fake.getJobReturns.result1, fake.getJobReturns.result2
	}
}

func (fake *FakePipelineDB) GetJobCallCount() int {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	return len(fake.getJobArgsForCall)
}

func (fake *FakePipelineDB) GetJobArgsForCall(i int) string {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	return fake.getJobArgsForCall[i].job
}

func (fake *FakePipelineDB) GetJobReturns(result1 db.SavedJob, result2 error) {
	fake.GetJobStub = nil
	fake.getJobReturns = struct {
		result1 db.SavedJob
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) PauseJob(job string) error {
	fake.pauseJobMutex.Lock()
	fake.pauseJobArgsForCall = append(fake.pauseJobArgsForCall, struct {
		job string
	}{job})
	fake.pauseJobMutex.Unlock()
	if fake.PauseJobStub != nil {
		return fake.PauseJobStub(job)
	} else {
		return fake.pauseJobReturns.result1
	}
}

func (fake *FakePipelineDB) PauseJobCallCount() int {
	fake.pauseJobMutex.RLock()
	defer fake.pauseJobMutex.RUnlock()
	return len(fake.pauseJobArgsForCall)
}

func (fake *FakePipelineDB) PauseJobArgsForCall(i int) string {
	fake.pauseJobMutex.RLock()
	defer fake.pauseJobMutex.RUnlock()
	return fake.pauseJobArgsForCall[i].job
}

func (fake *FakePipelineDB) PauseJobReturns(result1 error) {
	fake.PauseJobStub = nil
	fake.pauseJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) UnpauseJob(job string) error {
	fake.unpauseJobMutex.Lock()
	fake.unpauseJobArgsForCall = append(fake.unpauseJobArgsForCall, struct {
		job string
	}{job})
	fake.unpauseJobMutex.Unlock()
	if fake.UnpauseJobStub != nil {
		return fake.UnpauseJobStub(job)
	} else {
		return fake.unpauseJobReturns.result1
	}
}

func (fake *FakePipelineDB) UnpauseJobCallCount() int {
	fake.unpauseJobMutex.RLock()
	defer fake.unpauseJobMutex.RUnlock()
	return len(fake.unpauseJobArgsForCall)
}

func (fake *FakePipelineDB) UnpauseJobArgsForCall(i int) string {
	fake.unpauseJobMutex.RLock()
	defer fake.unpauseJobMutex.RUnlock()
	return fake.unpauseJobArgsForCall[i].job
}

func (fake *FakePipelineDB) UnpauseJobReturns(result1 error) {
	fake.UnpauseJobStub = nil
	fake.unpauseJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) GetJobFinishedAndNextBuild(job string) (*db.Build, *db.Build, error) {
	fake.getJobFinishedAndNextBuildMutex.Lock()
	fake.getJobFinishedAndNextBuildArgsForCall = append(fake.getJobFinishedAndNextBuildArgsForCall, struct {
		job string
	}{job})
	fake.getJobFinishedAndNextBuildMutex.Unlock()
	if fake.GetJobFinishedAndNextBuildStub != nil {
		return fake.GetJobFinishedAndNextBuildStub(job)
	} else {
		return fake.getJobFinishedAndNextBuildReturns.result1, fake.getJobFinishedAndNextBuildReturns.result2, fake.getJobFinishedAndNextBuildReturns.result3
	}
}

func (fake *FakePipelineDB) GetJobFinishedAndNextBuildCallCount() int {
	fake.getJobFinishedAndNextBuildMutex.RLock()
	defer fake.getJobFinishedAndNextBuildMutex.RUnlock()
	return len(fake.getJobFinishedAndNextBuildArgsForCall)
}

func (fake *FakePipelineDB) GetJobFinishedAndNextBuildArgsForCall(i int) string {
	fake.getJobFinishedAndNextBuildMutex.RLock()
	defer fake.getJobFinishedAndNextBuildMutex.RUnlock()
	return fake.getJobFinishedAndNextBuildArgsForCall[i].job
}

func (fake *FakePipelineDB) GetJobFinishedAndNextBuildReturns(result1 *db.Build, result2 *db.Build, result3 error) {
	fake.GetJobFinishedAndNextBuildStub = nil
	fake.getJobFinishedAndNextBuildReturns = struct {
		result1 *db.Build
		result2 *db.Build
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePipelineDB) GetAllJobBuilds(job string) ([]db.Build, error) {
	fake.getAllJobBuildsMutex.Lock()
	fake.getAllJobBuildsArgsForCall = append(fake.getAllJobBuildsArgsForCall, struct {
		job string
	}{job})
	fake.getAllJobBuildsMutex.Unlock()
	if fake.GetAllJobBuildsStub != nil {
		return fake.GetAllJobBuildsStub(job)
	} else {
		return fake.getAllJobBuildsReturns.result1, fake.getAllJobBuildsReturns.result2
	}
}

func (fake *FakePipelineDB) GetAllJobBuildsCallCount() int {
	fake.getAllJobBuildsMutex.RLock()
	defer fake.getAllJobBuildsMutex.RUnlock()
	return len(fake.getAllJobBuildsArgsForCall)
}

func (fake *FakePipelineDB) GetAllJobBuildsArgsForCall(i int) string {
	fake.getAllJobBuildsMutex.RLock()
	defer fake.getAllJobBuildsMutex.RUnlock()
	return fake.getAllJobBuildsArgsForCall[i].job
}

func (fake *FakePipelineDB) GetAllJobBuildsReturns(result1 []db.Build, result2 error) {
	fake.GetAllJobBuildsStub = nil
	fake.getAllJobBuildsReturns = struct {
		result1 []db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetJobBuild(job string, build string) (db.Build, error) {
	fake.getJobBuildMutex.Lock()
	fake.getJobBuildArgsForCall = append(fake.getJobBuildArgsForCall, struct {
		job   string
		build string
	}{job, build})
	fake.getJobBuildMutex.Unlock()
	if fake.GetJobBuildStub != nil {
		return fake.GetJobBuildStub(job, build)
	} else {
		return fake.getJobBuildReturns.result1, fake.getJobBuildReturns.result2
	}
}

func (fake *FakePipelineDB) GetJobBuildCallCount() int {
	fake.getJobBuildMutex.RLock()
	defer fake.getJobBuildMutex.RUnlock()
	return len(fake.getJobBuildArgsForCall)
}

func (fake *FakePipelineDB) GetJobBuildArgsForCall(i int) (string, string) {
	fake.getJobBuildMutex.RLock()
	defer fake.getJobBuildMutex.RUnlock()
	return fake.getJobBuildArgsForCall[i].job, fake.getJobBuildArgsForCall[i].build
}

func (fake *FakePipelineDB) GetJobBuildReturns(result1 db.Build, result2 error) {
	fake.GetJobBuildStub = nil
	fake.getJobBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) CreateJobBuild(job string) (db.Build, error) {
	fake.createJobBuildMutex.Lock()
	fake.createJobBuildArgsForCall = append(fake.createJobBuildArgsForCall, struct {
		job string
	}{job})
	fake.createJobBuildMutex.Unlock()
	if fake.CreateJobBuildStub != nil {
		return fake.CreateJobBuildStub(job)
	} else {
		return fake.createJobBuildReturns.result1, fake.createJobBuildReturns.result2
	}
}

func (fake *FakePipelineDB) CreateJobBuildCallCount() int {
	fake.createJobBuildMutex.RLock()
	defer fake.createJobBuildMutex.RUnlock()
	return len(fake.createJobBuildArgsForCall)
}

func (fake *FakePipelineDB) CreateJobBuildArgsForCall(i int) string {
	fake.createJobBuildMutex.RLock()
	defer fake.createJobBuildMutex.RUnlock()
	return fake.createJobBuildArgsForCall[i].job
}

func (fake *FakePipelineDB) CreateJobBuildReturns(result1 db.Build, result2 error) {
	fake.CreateJobBuildStub = nil
	fake.createJobBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) CreateJobBuildForCandidateInputs(job string) (db.Build, bool, error) {
	fake.createJobBuildForCandidateInputsMutex.Lock()
	fake.createJobBuildForCandidateInputsArgsForCall = append(fake.createJobBuildForCandidateInputsArgsForCall, struct {
		job string
	}{job})
	fake.createJobBuildForCandidateInputsMutex.Unlock()
	if fake.CreateJobBuildForCandidateInputsStub != nil {
		return fake.CreateJobBuildForCandidateInputsStub(job)
	} else {
		return fake.createJobBuildForCandidateInputsReturns.result1, fake.createJobBuildForCandidateInputsReturns.result2, fake.createJobBuildForCandidateInputsReturns.result3
	}
}

func (fake *FakePipelineDB) CreateJobBuildForCandidateInputsCallCount() int {
	fake.createJobBuildForCandidateInputsMutex.RLock()
	defer fake.createJobBuildForCandidateInputsMutex.RUnlock()
	return len(fake.createJobBuildForCandidateInputsArgsForCall)
}

func (fake *FakePipelineDB) CreateJobBuildForCandidateInputsArgsForCall(i int) string {
	fake.createJobBuildForCandidateInputsMutex.RLock()
	defer fake.createJobBuildForCandidateInputsMutex.RUnlock()
	return fake.createJobBuildForCandidateInputsArgsForCall[i].job
}

func (fake *FakePipelineDB) CreateJobBuildForCandidateInputsReturns(result1 db.Build, result2 bool, result3 error) {
	fake.CreateJobBuildForCandidateInputsStub = nil
	fake.createJobBuildForCandidateInputsReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePipelineDB) UseInputsForBuild(buildID int, inputs []db.BuildInput) error {
	fake.useInputsForBuildMutex.Lock()
	fake.useInputsForBuildArgsForCall = append(fake.useInputsForBuildArgsForCall, struct {
		buildID int
		inputs  []db.BuildInput
	}{buildID, inputs})
	fake.useInputsForBuildMutex.Unlock()
	if fake.UseInputsForBuildStub != nil {
		return fake.UseInputsForBuildStub(buildID, inputs)
	} else {
		return fake.useInputsForBuildReturns.result1
	}
}

func (fake *FakePipelineDB) UseInputsForBuildCallCount() int {
	fake.useInputsForBuildMutex.RLock()
	defer fake.useInputsForBuildMutex.RUnlock()
	return len(fake.useInputsForBuildArgsForCall)
}

func (fake *FakePipelineDB) UseInputsForBuildArgsForCall(i int) (int, []db.BuildInput) {
	fake.useInputsForBuildMutex.RLock()
	defer fake.useInputsForBuildMutex.RUnlock()
	return fake.useInputsForBuildArgsForCall[i].buildID, fake.useInputsForBuildArgsForCall[i].inputs
}

func (fake *FakePipelineDB) UseInputsForBuildReturns(result1 error) {
	fake.UseInputsForBuildStub = nil
	fake.useInputsForBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineDB) GetLatestInputVersions(arg1 []atc.JobInput) ([]db.BuildInput, error) {
	fake.getLatestInputVersionsMutex.Lock()
	fake.getLatestInputVersionsArgsForCall = append(fake.getLatestInputVersionsArgsForCall, struct {
		arg1 []atc.JobInput
	}{arg1})
	fake.getLatestInputVersionsMutex.Unlock()
	if fake.GetLatestInputVersionsStub != nil {
		return fake.GetLatestInputVersionsStub(arg1)
	} else {
		return fake.getLatestInputVersionsReturns.result1, fake.getLatestInputVersionsReturns.result2
	}
}

func (fake *FakePipelineDB) GetLatestInputVersionsCallCount() int {
	fake.getLatestInputVersionsMutex.RLock()
	defer fake.getLatestInputVersionsMutex.RUnlock()
	return len(fake.getLatestInputVersionsArgsForCall)
}

func (fake *FakePipelineDB) GetLatestInputVersionsArgsForCall(i int) []atc.JobInput {
	fake.getLatestInputVersionsMutex.RLock()
	defer fake.getLatestInputVersionsMutex.RUnlock()
	return fake.getLatestInputVersionsArgsForCall[i].arg1
}

func (fake *FakePipelineDB) GetLatestInputVersionsReturns(result1 []db.BuildInput, result2 error) {
	fake.GetLatestInputVersionsStub = nil
	fake.getLatestInputVersionsReturns = struct {
		result1 []db.BuildInput
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetJobBuildForInputs(job string, inputs []db.BuildInput) (db.Build, error) {
	fake.getJobBuildForInputsMutex.Lock()
	fake.getJobBuildForInputsArgsForCall = append(fake.getJobBuildForInputsArgsForCall, struct {
		job    string
		inputs []db.BuildInput
	}{job, inputs})
	fake.getJobBuildForInputsMutex.Unlock()
	if fake.GetJobBuildForInputsStub != nil {
		return fake.GetJobBuildForInputsStub(job, inputs)
	} else {
		return fake.getJobBuildForInputsReturns.result1, fake.getJobBuildForInputsReturns.result2
	}
}

func (fake *FakePipelineDB) GetJobBuildForInputsCallCount() int {
	fake.getJobBuildForInputsMutex.RLock()
	defer fake.getJobBuildForInputsMutex.RUnlock()
	return len(fake.getJobBuildForInputsArgsForCall)
}

func (fake *FakePipelineDB) GetJobBuildForInputsArgsForCall(i int) (string, []db.BuildInput) {
	fake.getJobBuildForInputsMutex.RLock()
	defer fake.getJobBuildForInputsMutex.RUnlock()
	return fake.getJobBuildForInputsArgsForCall[i].job, fake.getJobBuildForInputsArgsForCall[i].inputs
}

func (fake *FakePipelineDB) GetJobBuildForInputsReturns(result1 db.Build, result2 error) {
	fake.GetJobBuildForInputsStub = nil
	fake.getJobBuildForInputsReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetNextPendingBuild(job string) (db.Build, error) {
	fake.getNextPendingBuildMutex.Lock()
	fake.getNextPendingBuildArgsForCall = append(fake.getNextPendingBuildArgsForCall, struct {
		job string
	}{job})
	fake.getNextPendingBuildMutex.Unlock()
	if fake.GetNextPendingBuildStub != nil {
		return fake.GetNextPendingBuildStub(job)
	} else {
		return fake.getNextPendingBuildReturns.result1, fake.getNextPendingBuildReturns.result2
	}
}

func (fake *FakePipelineDB) GetNextPendingBuildCallCount() int {
	fake.getNextPendingBuildMutex.RLock()
	defer fake.getNextPendingBuildMutex.RUnlock()
	return len(fake.getNextPendingBuildArgsForCall)
}

func (fake *FakePipelineDB) GetNextPendingBuildArgsForCall(i int) string {
	fake.getNextPendingBuildMutex.RLock()
	defer fake.getNextPendingBuildMutex.RUnlock()
	return fake.getNextPendingBuildArgsForCall[i].job
}

func (fake *FakePipelineDB) GetNextPendingBuildReturns(result1 db.Build, result2 error) {
	fake.GetNextPendingBuildStub = nil
	fake.getNextPendingBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetCurrentBuild(job string) (db.Build, error) {
	fake.getCurrentBuildMutex.Lock()
	fake.getCurrentBuildArgsForCall = append(fake.getCurrentBuildArgsForCall, struct {
		job string
	}{job})
	fake.getCurrentBuildMutex.Unlock()
	if fake.GetCurrentBuildStub != nil {
		return fake.GetCurrentBuildStub(job)
	} else {
		return fake.getCurrentBuildReturns.result1, fake.getCurrentBuildReturns.result2
	}
}

func (fake *FakePipelineDB) GetCurrentBuildCallCount() int {
	fake.getCurrentBuildMutex.RLock()
	defer fake.getCurrentBuildMutex.RUnlock()
	return len(fake.getCurrentBuildArgsForCall)
}

func (fake *FakePipelineDB) GetCurrentBuildArgsForCall(i int) string {
	fake.getCurrentBuildMutex.RLock()
	defer fake.getCurrentBuildMutex.RUnlock()
	return fake.getCurrentBuildArgsForCall[i].job
}

func (fake *FakePipelineDB) GetCurrentBuildReturns(result1 db.Build, result2 error) {
	fake.GetCurrentBuildStub = nil
	fake.getCurrentBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetRunningBuildsBySerialGroup(jobName string, serialGrous []string) ([]db.Build, error) {
	fake.getRunningBuildsBySerialGroupMutex.Lock()
	fake.getRunningBuildsBySerialGroupArgsForCall = append(fake.getRunningBuildsBySerialGroupArgsForCall, struct {
		jobName     string
		serialGrous []string
	}{jobName, serialGrous})
	fake.getRunningBuildsBySerialGroupMutex.Unlock()
	if fake.GetRunningBuildsBySerialGroupStub != nil {
		return fake.GetRunningBuildsBySerialGroupStub(jobName, serialGrous)
	} else {
		return fake.getRunningBuildsBySerialGroupReturns.result1, fake.getRunningBuildsBySerialGroupReturns.result2
	}
}

func (fake *FakePipelineDB) GetRunningBuildsBySerialGroupCallCount() int {
	fake.getRunningBuildsBySerialGroupMutex.RLock()
	defer fake.getRunningBuildsBySerialGroupMutex.RUnlock()
	return len(fake.getRunningBuildsBySerialGroupArgsForCall)
}

func (fake *FakePipelineDB) GetRunningBuildsBySerialGroupArgsForCall(i int) (string, []string) {
	fake.getRunningBuildsBySerialGroupMutex.RLock()
	defer fake.getRunningBuildsBySerialGroupMutex.RUnlock()
	return fake.getRunningBuildsBySerialGroupArgsForCall[i].jobName, fake.getRunningBuildsBySerialGroupArgsForCall[i].serialGrous
}

func (fake *FakePipelineDB) GetRunningBuildsBySerialGroupReturns(result1 []db.Build, result2 error) {
	fake.GetRunningBuildsBySerialGroupStub = nil
	fake.getRunningBuildsBySerialGroupReturns = struct {
		result1 []db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetNextPendingBuildBySerialGroup(jobName string, serialGroups []string) (db.Build, error) {
	fake.getNextPendingBuildBySerialGroupMutex.Lock()
	fake.getNextPendingBuildBySerialGroupArgsForCall = append(fake.getNextPendingBuildBySerialGroupArgsForCall, struct {
		jobName      string
		serialGroups []string
	}{jobName, serialGroups})
	fake.getNextPendingBuildBySerialGroupMutex.Unlock()
	if fake.GetNextPendingBuildBySerialGroupStub != nil {
		return fake.GetNextPendingBuildBySerialGroupStub(jobName, serialGroups)
	} else {
		return fake.getNextPendingBuildBySerialGroupReturns.result1, fake.getNextPendingBuildBySerialGroupReturns.result2
	}
}

func (fake *FakePipelineDB) GetNextPendingBuildBySerialGroupCallCount() int {
	fake.getNextPendingBuildBySerialGroupMutex.RLock()
	defer fake.getNextPendingBuildBySerialGroupMutex.RUnlock()
	return len(fake.getNextPendingBuildBySerialGroupArgsForCall)
}

func (fake *FakePipelineDB) GetNextPendingBuildBySerialGroupArgsForCall(i int) (string, []string) {
	fake.getNextPendingBuildBySerialGroupMutex.RLock()
	defer fake.getNextPendingBuildBySerialGroupMutex.RUnlock()
	return fake.getNextPendingBuildBySerialGroupArgsForCall[i].jobName, fake.getNextPendingBuildBySerialGroupArgsForCall[i].serialGroups
}

func (fake *FakePipelineDB) GetNextPendingBuildBySerialGroupReturns(result1 db.Build, result2 error) {
	fake.GetNextPendingBuildBySerialGroupStub = nil
	fake.getNextPendingBuildBySerialGroupReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) ScheduleBuild(buildID int, job atc.JobConfig) (bool, error) {
	fake.scheduleBuildMutex.Lock()
	fake.scheduleBuildArgsForCall = append(fake.scheduleBuildArgsForCall, struct {
		buildID int
		job     atc.JobConfig
	}{buildID, job})
	fake.scheduleBuildMutex.Unlock()
	if fake.ScheduleBuildStub != nil {
		return fake.ScheduleBuildStub(buildID, job)
	} else {
		return fake.scheduleBuildReturns.result1, fake.scheduleBuildReturns.result2
	}
}

func (fake *FakePipelineDB) ScheduleBuildCallCount() int {
	fake.scheduleBuildMutex.RLock()
	defer fake.scheduleBuildMutex.RUnlock()
	return len(fake.scheduleBuildArgsForCall)
}

func (fake *FakePipelineDB) ScheduleBuildArgsForCall(i int) (int, atc.JobConfig) {
	fake.scheduleBuildMutex.RLock()
	defer fake.scheduleBuildMutex.RUnlock()
	return fake.scheduleBuildArgsForCall[i].buildID, fake.scheduleBuildArgsForCall[i].job
}

func (fake *FakePipelineDB) ScheduleBuildReturns(result1 bool, result2 error) {
	fake.ScheduleBuildStub = nil
	fake.scheduleBuildReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) SaveBuildInput(buildID int, input db.BuildInput) (db.SavedVersionedResource, error) {
	fake.saveBuildInputMutex.Lock()
	fake.saveBuildInputArgsForCall = append(fake.saveBuildInputArgsForCall, struct {
		buildID int
		input   db.BuildInput
	}{buildID, input})
	fake.saveBuildInputMutex.Unlock()
	if fake.SaveBuildInputStub != nil {
		return fake.SaveBuildInputStub(buildID, input)
	} else {
		return fake.saveBuildInputReturns.result1, fake.saveBuildInputReturns.result2
	}
}

func (fake *FakePipelineDB) SaveBuildInputCallCount() int {
	fake.saveBuildInputMutex.RLock()
	defer fake.saveBuildInputMutex.RUnlock()
	return len(fake.saveBuildInputArgsForCall)
}

func (fake *FakePipelineDB) SaveBuildInputArgsForCall(i int) (int, db.BuildInput) {
	fake.saveBuildInputMutex.RLock()
	defer fake.saveBuildInputMutex.RUnlock()
	return fake.saveBuildInputArgsForCall[i].buildID, fake.saveBuildInputArgsForCall[i].input
}

func (fake *FakePipelineDB) SaveBuildInputReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.SaveBuildInputStub = nil
	fake.saveBuildInputReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) SaveBuildOutput(buildID int, vr db.VersionedResource) (db.SavedVersionedResource, error) {
	fake.saveBuildOutputMutex.Lock()
	fake.saveBuildOutputArgsForCall = append(fake.saveBuildOutputArgsForCall, struct {
		buildID int
		vr      db.VersionedResource
	}{buildID, vr})
	fake.saveBuildOutputMutex.Unlock()
	if fake.SaveBuildOutputStub != nil {
		return fake.SaveBuildOutputStub(buildID, vr)
	} else {
		return fake.saveBuildOutputReturns.result1, fake.saveBuildOutputReturns.result2
	}
}

func (fake *FakePipelineDB) SaveBuildOutputCallCount() int {
	fake.saveBuildOutputMutex.RLock()
	defer fake.saveBuildOutputMutex.RUnlock()
	return len(fake.saveBuildOutputArgsForCall)
}

func (fake *FakePipelineDB) SaveBuildOutputArgsForCall(i int) (int, db.VersionedResource) {
	fake.saveBuildOutputMutex.RLock()
	defer fake.saveBuildOutputMutex.RUnlock()
	return fake.saveBuildOutputArgsForCall[i].buildID, fake.saveBuildOutputArgsForCall[i].vr
}

func (fake *FakePipelineDB) SaveBuildOutputReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.SaveBuildOutputStub = nil
	fake.saveBuildOutputReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDB) GetBuildResources(buildID int) ([]db.BuildInput, []db.BuildOutput, error) {
	fake.getBuildResourcesMutex.Lock()
	fake.getBuildResourcesArgsForCall = append(fake.getBuildResourcesArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildResourcesMutex.Unlock()
	if fake.GetBuildResourcesStub != nil {
		return fake.GetBuildResourcesStub(buildID)
	} else {
		return fake.getBuildResourcesReturns.result1, fake.getBuildResourcesReturns.result2, fake.getBuildResourcesReturns.result3
	}
}

func (fake *FakePipelineDB) GetBuildResourcesCallCount() int {
	fake.getBuildResourcesMutex.RLock()
	defer fake.getBuildResourcesMutex.RUnlock()
	return len(fake.getBuildResourcesArgsForCall)
}

func (fake *FakePipelineDB) GetBuildResourcesArgsForCall(i int) int {
	fake.getBuildResourcesMutex.RLock()
	defer fake.getBuildResourcesMutex.RUnlock()
	return fake.getBuildResourcesArgsForCall[i].buildID
}

func (fake *FakePipelineDB) GetBuildResourcesReturns(result1 []db.BuildInput, result2 []db.BuildOutput, result3 error) {
	fake.GetBuildResourcesStub = nil
	fake.getBuildResourcesReturns = struct {
		result1 []db.BuildInput
		result2 []db.BuildOutput
		result3 error
	}{result1, result2, result3}
}

var _ db.PipelineDB = new(FakePipelineDB)
