// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/exec"
)

type FakeSourceRepository struct {
	RegisterSourceStub        func(exec.SourceName, exec.ArtifactSource)
	registerSourceMutex       sync.RWMutex
	registerSourceArgsForCall []struct {
		arg1 exec.SourceName
		arg2 exec.ArtifactSource
	}
	SourceForStub        func(exec.SourceName) (exec.ArtifactSource, bool)
	sourceForMutex       sync.RWMutex
	sourceForArgsForCall []struct {
		arg1 exec.SourceName
	}
	sourceForReturns struct {
		result1 exec.ArtifactSource
		result2 bool
	}
}

func (fake *FakeSourceRepository) RegisterSource(arg1 exec.SourceName, arg2 exec.ArtifactSource) {
	fake.registerSourceMutex.Lock()
	fake.registerSourceArgsForCall = append(fake.registerSourceArgsForCall, struct {
		arg1 exec.SourceName
		arg2 exec.ArtifactSource
	}{arg1, arg2})
	fake.registerSourceMutex.Unlock()
	if fake.RegisterSourceStub != nil {
		fake.RegisterSourceStub(arg1, arg2)
	}
}

func (fake *FakeSourceRepository) RegisterSourceCallCount() int {
	fake.registerSourceMutex.RLock()
	defer fake.registerSourceMutex.RUnlock()
	return len(fake.registerSourceArgsForCall)
}

func (fake *FakeSourceRepository) RegisterSourceArgsForCall(i int) (exec.SourceName, exec.ArtifactSource) {
	fake.registerSourceMutex.RLock()
	defer fake.registerSourceMutex.RUnlock()
	return fake.registerSourceArgsForCall[i].arg1, fake.registerSourceArgsForCall[i].arg2
}

func (fake *FakeSourceRepository) SourceFor(arg1 exec.SourceName) (exec.ArtifactSource, bool) {
	fake.sourceForMutex.Lock()
	fake.sourceForArgsForCall = append(fake.sourceForArgsForCall, struct {
		arg1 exec.SourceName
	}{arg1})
	fake.sourceForMutex.Unlock()
	if fake.SourceForStub != nil {
		return fake.SourceForStub(arg1)
	} else {
		return fake.sourceForReturns.result1, fake.sourceForReturns.result2
	}
}

func (fake *FakeSourceRepository) SourceForCallCount() int {
	fake.sourceForMutex.RLock()
	defer fake.sourceForMutex.RUnlock()
	return len(fake.sourceForArgsForCall)
}

func (fake *FakeSourceRepository) SourceForArgsForCall(i int) exec.SourceName {
	fake.sourceForMutex.RLock()
	defer fake.sourceForMutex.RUnlock()
	return fake.sourceForArgsForCall[i].arg1
}

func (fake *FakeSourceRepository) SourceForReturns(result1 exec.ArtifactSource, result2 bool) {
	fake.SourceForStub = nil
	fake.sourceForReturns = struct {
		result1 exec.ArtifactSource
		result2 bool
	}{result1, result2}
}

var _ exec.SourceRepository = new(FakeSourceRepository)
